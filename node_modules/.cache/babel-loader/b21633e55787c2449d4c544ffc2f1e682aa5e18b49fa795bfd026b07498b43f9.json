{"ast":null,"code":"\n// import { useState } from 'react';\n// import './App.css';\n// const initial = [\n//   [-1, 5, -1, 9, -1, -1, -1, -1, -1],\n//   [8, -1, -1, -1, 4, -1, 3, -1, 7],\n//   [-1, -1, -1, 2, 8, -1, 1, 9, -1],\n//   [5, 3, 8, 6, -1, 7, 9, 4, -1],\n//   [-1, 2, -1, 3, -1, 1, -1, -1, -1],\n//   [1, -1, 9, 8, -1, 4, 6, 2, 3],\n//   [9, -1, 7, 4, -1, -1, -1, -1, -1],\n//   [-1, 4, 5, -1, -1, -1, 2, -1, 9],\n//   [-1, -1, -1, -1, 3, -1, -1, 7, -1]\n// ]\n// function App() {\n//   const [sudokuArr , setSudokuArr] = useState(getDeepCopy(initial))\n\n//   function getDeepCopy(arr){\n//     return JSON.parse(JSON.stringify(arr));\n//   }\n\n//   function onInputChange(e,row,col){\n//     var val =parseInt(e.target.value) || -1 , grid = getDeepCopy(sudokuArr);\n//     if(val === -1 || val >=1 && val <=9 ){\n//       grid[row][col] = val;\n//     }\n//     setSudokuArr(grid)\n//   }\n\n//   function compareSudokus(currentSudoku,solvedSudoku){\n//     let res = {\n//       isComplete:true,\n//       isSolved:true\n//     }\n//     for(let i=0; i < 9; i++){\n//       for(let j=0; j<9; j++){\n//         if(currentSudoku [i][j] !== solveSudoku[i][j]){\n//           if(currentSudoku[i][j] != -1){\n//             res.isSolved = false\n//           }\n//           res.isComplete = false\n//         }\n//       }\n//     }\n//     return res\n//   }\n\n//   function validateSudoku(){\n//     let sudoku = getDeepCopy(initial)\n//     solver(sudoku);\n//     let compare = compareSudokus(sudokuArr, sudoku)\n//     if(compare.isComplete){\n//       alert(\"congrtulations ! you have solved sudoku\")\n//     }else {\n//       alert(\"can't be solve\")\n//     }\n\n//   }\n\n//   function checkRow(grid,row,num){\n//     return grid[row].indexOf(num)=== -1\n//   }\n\n//   function checkCol( grid, col, num){\n//     return grid.map(row => row[col]).indexOf(num)=== -1\n//   }\n\n//   function checkBox(grid,row,col,num){\n//     let boxArr =[],\n//     rowStart = row- (row%3),\n//     colStart = col -(col%3);\n//     for(let i=0; i< 3;i++){\n//       for(let j=0; j<3;j++){\n//         boxArr.push(grid[rowStart + i][colStart + i])\n//       }\n//     }\n//     return boxArr .indexOf(num)===-1\n//   }\n\n//   function checkValid(grid,row,num,col ){\n//      if(checkRow(grid, row, num) && checkCol(grid, col, num) && checkBox(grid,col,row,num)){\n//       return true\n//      }\n//      return false\n//   }\n\n//   function getNext(row,col){\n//     return col !== 8 ?[ row,col + 1] : row !== 8 ? [row +1 ,0] : [0,0]\n//   }\n\n//   function solver(grid,row=0,col= 0){\n//     if(grid[row][col]!== -1){\n//       let isLast = row>= 8 && col>=8\n//       if(!isLast){\n//         let [newRow,newCol] = getNext(row,col)\n//         return solver(newCol,newRow,grid)\n//       }\n\n//     }\n//     for(let num = 1; num <=9; num++){\n//       if(checkValid(grid,row,col,num)){\n//         grid[row][col]= num\n//         let [newRow, newCol] = getNext(row,col)\n//         if(!newRow && newCol){\n//           return true\n//         }\n//         if(solver(grid,newRow,newCol)){\n//           return true\n//         }\n//       }\n//     }\n//     grid[row][col] = -1;\n//     return false\n\n//   }\n//   function solveSudoku(){\n//     let sudoku = getDeepCopy(initial);\n//     solver(sudoku);\n//     setSudokuArr(sudoku); \n//   }\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"App-header\">\n//         <h3>Sudoku solver</h3>\n\n//         <table>\n//           <tbody>\n//             {\n//               [0, 1, 2, 3, 4, 5, 6, 7, 8].map((row, rIndex) => {\n//                 return <tr key={rIndex} className={(row + 1) %3 === 0 ? 'bBorder' : ''}>\n//                   {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((col, cIndex) => {\n//                     return <td key={rIndex + cIndex} className={(col + 1) %3 === 0 ? 'rBorder' : ''} >\n//                       <input onChange={(e)=> onInputChange(e,row,col)} \n//                         value={sudokuArr[row][col]=== -1 ? '' : sudokuArr[row][col] } \n//                         className=\"cellInput\"  \n//                         disabled={initial[row][col] !== -1}/>\n//                     </td>\n//                   })}\n//                 </tr>\n\n//               })\n//             }\n//           </tbody>\n//         </table>\n//         <div className='buttonContainer'>\n//           <button className='validateButton' onClick={validateSudoku}>Validate</button>\n//           <button className='solveButton' onClick={solveSudoku}>Solve</button>\n\n//         </div>\n//       </div>\n//     </div>\n//   )\n\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/devikajoshi/sudoku-game/src/App.js"],"sourcesContent":["\n// import { useState } from 'react';\n// import './App.css';\n// const initial = [\n//   [-1, 5, -1, 9, -1, -1, -1, -1, -1],\n//   [8, -1, -1, -1, 4, -1, 3, -1, 7],\n//   [-1, -1, -1, 2, 8, -1, 1, 9, -1],\n//   [5, 3, 8, 6, -1, 7, 9, 4, -1],\n//   [-1, 2, -1, 3, -1, 1, -1, -1, -1],\n//   [1, -1, 9, 8, -1, 4, 6, 2, 3],\n//   [9, -1, 7, 4, -1, -1, -1, -1, -1],\n//   [-1, 4, 5, -1, -1, -1, 2, -1, 9],\n//   [-1, -1, -1, -1, 3, -1, -1, 7, -1]\n// ]\n// function App() {\n//   const [sudokuArr , setSudokuArr] = useState(getDeepCopy(initial))\n\n//   function getDeepCopy(arr){\n//     return JSON.parse(JSON.stringify(arr));\n//   }\n\n//   function onInputChange(e,row,col){\n//     var val =parseInt(e.target.value) || -1 , grid = getDeepCopy(sudokuArr);\n//     if(val === -1 || val >=1 && val <=9 ){\n//       grid[row][col] = val;\n//     }\n//     setSudokuArr(grid)\n//   }\n\n//   function compareSudokus(currentSudoku,solvedSudoku){\n//     let res = {\n//       isComplete:true,\n//       isSolved:true\n//     }\n//     for(let i=0; i < 9; i++){\n//       for(let j=0; j<9; j++){\n//         if(currentSudoku [i][j] !== solveSudoku[i][j]){\n//           if(currentSudoku[i][j] != -1){\n//             res.isSolved = false\n//           }\n//           res.isComplete = false\n//         }\n//       }\n//     }\n//     return res\n//   }\n\n//   function validateSudoku(){\n//     let sudoku = getDeepCopy(initial)\n//     solver(sudoku);\n//     let compare = compareSudokus(sudokuArr, sudoku)\n//     if(compare.isComplete){\n//       alert(\"congrtulations ! you have solved sudoku\")\n//     }else {\n//       alert(\"can't be solve\")\n//     }\n\n\n//   }\n\n//   function checkRow(grid,row,num){\n//     return grid[row].indexOf(num)=== -1\n//   }\n\n//   function checkCol( grid, col, num){\n//     return grid.map(row => row[col]).indexOf(num)=== -1\n//   }\n\n//   function checkBox(grid,row,col,num){\n//     let boxArr =[],\n//     rowStart = row- (row%3),\n//     colStart = col -(col%3);\n//     for(let i=0; i< 3;i++){\n//       for(let j=0; j<3;j++){\n//         boxArr.push(grid[rowStart + i][colStart + i])\n//       }\n//     }\n//     return boxArr .indexOf(num)===-1\n//   }\n\n//   function checkValid(grid,row,num,col ){\n//      if(checkRow(grid, row, num) && checkCol(grid, col, num) && checkBox(grid,col,row,num)){\n//       return true\n//      }\n//      return false\n//   }\n\n//   function getNext(row,col){\n//     return col !== 8 ?[ row,col + 1] : row !== 8 ? [row +1 ,0] : [0,0]\n//   }\n\n//   function solver(grid,row=0,col= 0){\n//     if(grid[row][col]!== -1){\n//       let isLast = row>= 8 && col>=8\n//       if(!isLast){\n//         let [newRow,newCol] = getNext(row,col)\n//         return solver(newCol,newRow,grid)\n//       }\n     \n//     }\n//     for(let num = 1; num <=9; num++){\n//       if(checkValid(grid,row,col,num)){\n//         grid[row][col]= num\n//         let [newRow, newCol] = getNext(row,col)\n//         if(!newRow && newCol){\n//           return true\n//         }\n//         if(solver(grid,newRow,newCol)){\n//           return true\n//         }\n//       }\n//     }\n//     grid[row][col] = -1;\n//     return false\n\n//   }\n//   function solveSudoku(){\n//     let sudoku = getDeepCopy(initial);\n//     solver(sudoku);\n//     setSudokuArr(sudoku); \n//   }\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"App-header\">\n//         <h3>Sudoku solver</h3>\n\n//         <table>\n//           <tbody>\n//             {\n//               [0, 1, 2, 3, 4, 5, 6, 7, 8].map((row, rIndex) => {\n//                 return <tr key={rIndex} className={(row + 1) %3 === 0 ? 'bBorder' : ''}>\n//                   {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((col, cIndex) => {\n//                     return <td key={rIndex + cIndex} className={(col + 1) %3 === 0 ? 'rBorder' : ''} >\n//                       <input onChange={(e)=> onInputChange(e,row,col)} \n//                         value={sudokuArr[row][col]=== -1 ? '' : sudokuArr[row][col] } \n//                         className=\"cellInput\"  \n//                         disabled={initial[row][col] !== -1}/>\n//                     </td>\n//                   })}\n//                 </tr>\n\n//               })\n//             }\n//           </tbody>\n//         </table>\n//         <div className='buttonContainer'>\n//           <button className='validateButton' onClick={validateSudoku}>Validate</button>\n//           <button className='solveButton' onClick={solveSudoku}>Solve</button>\n\n//         </div>\n//       </div>\n//     </div>\n//   )\n\n// }\n\n// export default App;\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}