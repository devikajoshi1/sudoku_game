{"ast":null,"code":"var _jsxFileName = \"/Users/devikajoshi/sudoku-game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// This sets up an empty board with zeros where users will input values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emptyBoard = Array(9).fill(null).map(() => Array(9).fill(0));\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState(emptyBoard);\n  const [error, setError] = useState(null);\n\n  // Function to handle changes when a user types in a cell\n  const handleCellChange = (row, col, value) => {\n    const newBoard = board.map((rowArray, rowIndex) => rowArray.map((cell, colIndex) => rowIndex === row && colIndex === col ? parseInt(value) || 0 : cell));\n    setBoard(newBoard);\n    setError(null); // Clear error messages on new input\n  };\n\n  // Function to check if the current board is valid according to Sudoku rules\n  const isValidBoard = () => {\n    for (let i = 0; i < 9; i++) {\n      let rowSet = new Set();\n      let colSet = new Set();\n      let gridSet = new Set();\n      for (let j = 0; j < 9; j++) {\n        const rowVal = board[i][j];\n        const colVal = board[j][i];\n        const gridVal = board[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + j % 3];\n        if (rowVal && rowSet.has(rowVal)) return false;\n        if (colVal && colSet.has(colVal)) return false;\n        if (gridVal && gridSet.has(gridVal)) return false;\n        rowVal && rowSet.add(rowVal);\n        colVal && colSet.add(colVal);\n        gridVal && gridSet.add(gridVal);\n      }\n    }\n    return true;\n  };\n\n  // Function to validate the board when \"Validate\" is clicked\n  const validateBoard = () => {\n    setError(isValidBoard() ? \"Board is valid!\" : \"Board has duplicates. Check your inputs.\");\n  };\n\n  // Backtracking algorithm to solve the puzzle\n  const solveSudoku = () => {\n    if (!isValidBoard()) {\n      setError(\"Cannot solve. Please fix duplicates.\");\n      return;\n    }\n    const solve = board => {\n      for (let row = 0; row < 9; row++) {\n        for (let col = 0; col < 9; col++) {\n          if (board[row][col] === 0) {\n            for (let num = 1; num <= 9; num++) {\n              board[row][col] = num;\n              if (isValidBoard() && solve(board)) return true;\n              board[row][col] = 0;\n            }\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n    const solvedBoard = [...board.map(row => [...row])];\n    if (solve(solvedBoard)) {\n      setBoard(solvedBoard);\n      setError(\"Solved!\");\n    } else {\n      setError(\"No solution found.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(9, 30px)',\n        gap: '2px'\n      },\n      children: board.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        value: cell === 0 ? '' : cell,\n        onChange: e => handleCellChange(rowIndex, colIndex, e.target.value),\n        style: {\n          width: '30px',\n          height: '30px',\n          textAlign: 'center'\n        },\n        maxLength: \"1\"\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateBoard,\n      children: \"Validate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: solveSudoku,\n      children: \"Solve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"V6JbwTquzX52ha4qqGvUaKf/AgY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","emptyBoard","Array","fill","map","App","_s","board","setBoard","error","setError","handleCellChange","row","col","value","newBoard","rowArray","rowIndex","cell","colIndex","parseInt","isValidBoard","i","rowSet","Set","colSet","gridSet","j","rowVal","colVal","gridVal","Math","floor","has","add","validateBoard","solveSudoku","solve","num","solvedBoard","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","display","gridTemplateColumns","gap","onChange","e","target","width","height","maxLength","color","onClick","_c","$RefreshReg$"],"sources":["/Users/devikajoshi/sudoku-game/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\n// This sets up an empty board with zeros where users will input values\nconst emptyBoard = Array(9).fill(null).map(() => Array(9).fill(0));\n\nconst App = () => {\n  const [board, setBoard] = useState(emptyBoard);\n  const [error, setError] = useState(null);\n\n  // Function to handle changes when a user types in a cell\n  const handleCellChange = (row, col, value) => {\n    const newBoard = board.map((rowArray, rowIndex) =>\n      rowArray.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col ? parseInt(value) || 0 : cell\n      )\n    );\n    setBoard(newBoard);\n    setError(null);  // Clear error messages on new input\n  };\n\n  // Function to check if the current board is valid according to Sudoku rules\n  const isValidBoard = () => {\n    for (let i = 0; i < 9; i++) {\n      let rowSet = new Set();\n      let colSet = new Set();\n      let gridSet = new Set();\n      for (let j = 0; j < 9; j++) {\n        const rowVal = board[i][j];\n        const colVal = board[j][i];\n        const gridVal = board[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + (j % 3)];\n        \n        if (rowVal && rowSet.has(rowVal)) return false;\n        if (colVal && colSet.has(colVal)) return false;\n        if (gridVal && gridSet.has(gridVal)) return false;\n\n        rowVal && rowSet.add(rowVal);\n        colVal && colSet.add(colVal);\n        gridVal && gridSet.add(gridVal);\n      }\n    }\n    return true;\n  };\n\n  // Function to validate the board when \"Validate\" is clicked\n  const validateBoard = () => {\n    setError(isValidBoard() ? \"Board is valid!\" : \"Board has duplicates. Check your inputs.\");\n  };\n\n  // Backtracking algorithm to solve the puzzle\n  const solveSudoku = () => {\n    if (!isValidBoard()) {\n      setError(\"Cannot solve. Please fix duplicates.\");\n      return;\n    }\n\n    const solve = (board) => {\n      for (let row = 0; row < 9; row++) {\n        for (let col = 0; col < 9; col++) {\n          if (board[row][col] === 0) {\n            for (let num = 1; num <= 9; num++) {\n              board[row][col] = num;\n              if (isValidBoard() && solve(board)) return true;\n              board[row][col] = 0;\n            }\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n\n    const solvedBoard = [...board.map(row => [...row])];\n    if (solve(solvedBoard)) {\n      setBoard(solvedBoard);\n      setError(\"Solved!\");\n    } else {\n      setError(\"No solution found.\");\n    }\n  };\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h1>Sudoku Game</h1>\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(9, 30px)', gap: '2px' }}>\n        {board.map((row, rowIndex) =>\n          row.map((cell, colIndex) => (\n            <input\n              key={`${rowIndex}-${colIndex}`}\n              value={cell === 0 ? '' : cell}\n              onChange={(e) => handleCellChange(rowIndex, colIndex, e.target.value)}\n              style={{ width: '30px', height: '30px', textAlign: 'center' }}\n              maxLength=\"1\"\n            />\n          ))\n        )}\n      </div>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      <button onClick={validateBoard}>Validate</button>\n      <button onClick={solveSudoku}>Solve</button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}